import tkinter as tk
from tkinter import filedialog, messagebox, ttk, simpledialog
import os
import json
import datetime as dt
import random
import sqlite3
import psycopg2

# Modern color palette inspired by Spotify
COLORS = {
    "bg_dark": "#121212",
    "bg_medium": "#181818",
    "bg_light": "#282828",
    "text_primary": "#FFFFFF",
    "text_secondary": "#B3B3B3",
    "accent": "#1DB954",
    "accent_hover": "#1AA34A",
    "icon_color": "#B3B3B3"
}


class DatabaseManager:
    def __init__(self, db_name='soundsync.db'):
        self.conn = sqlite3.connect(db_name)
        self.create_tables()

    def create_tables(self):
        cursor = self.conn.cursor()

        # Users table
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            username TEXT PRIMARY KEY,
            password TEXT NOT NULL
        )''')

        # Songs table
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS songs (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            title TEXT NOT NULL,
            artist TEXT NOT NULL,
            album TEXT,
            file_path TEXT UNIQUE NOT NULL
        )''')

        # Playlists table
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS playlists (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            user_username TEXT,
            FOREIGN KEY(user_username) REFERENCES users(username)
        )''')

        # Playlist_songs junction table
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS playlist_songs (
            playlist_id INTEGER,
            song_id INTEGER,
            PRIMARY KEY(playlist_id, song_id),
            FOREIGN KEY(playlist_id) REFERENCES playlists(id),
            FOREIGN KEY(song_id) REFERENCES songs(id)
        )''')

        self.conn.commit()

    def register_user(self, username, password):
        try:
            cursor = self.conn.cursor()
            cursor.execute("INSERT INTO users (username, password) VALUES (?, ?)",
                           (username, password))
            self.conn.commit()
            return True
        except sqlite3.IntegrityError:
            return False

    def validate_user(self, username, password):
        cursor = self.conn.cursor()
        cursor.execute("SELECT * FROM users WHERE username=? AND password=?",
                       (username, password))
        return cursor.fetchone() is not None

    def add_song(self, title, artist, album, file_path):
        cursor = self.conn.cursor()
        try:
            cursor.execute('''
                INSERT INTO songs (title, artist, album, file_path) 
                VALUES (?, ?, ?, ?)
            ''', (title, artist, album, file_path))
            self.conn.commit()
            return cursor.lastrowid
        except sqlite3.IntegrityError:
            # Song already exists, return its existing ID
            cursor.execute("SELECT id FROM songs WHERE file_path=?", (file_path,))
            return cursor.fetchone()[0]

    def create_playlist(self, name, username):
        cursor = self.conn.cursor()
        cursor.execute('''
            INSERT INTO playlists (name, user_username) 
            VALUES (?, ?)
        ''', (name, username))
        self.conn.commit()
        return cursor.lastrowid

    def add_song_to_playlist(self, playlist_id, song_id):
        cursor = self.conn.cursor()
        try:
            cursor.execute('''
                INSERT INTO playlist_songs (playlist_id, song_id) 
                VALUES (?, ?)
            ''', (playlist_id, song_id))
            self.conn.commit()
            return True
        except sqlite3.IntegrityError:
            return False

    def remove_song_from_playlist(self, playlist_id, song_id):
        cursor = self.conn.cursor()
        cursor.execute('''
            DELETE FROM playlist_songs
            WHERE playlist_id = ? AND song_id = ?
        ''', (playlist_id, song_id))
        self.conn.commit()
        return cursor.rowcount > 0

    def get_user_playlists(self, username):
        cursor = self.conn.cursor()
        cursor.execute('''
            SELECT id, name FROM playlists 
            WHERE user_username = ?
        ''', (username,))
        return cursor.fetchall()

    def get_playlist_songs(self, playlist_id):
        cursor = self.conn.cursor()
        cursor.execute('''
            SELECT s.id, s.title, s.artist, s.album 
            FROM songs s
            JOIN playlist_songs ps ON s.id = ps.song_id
            WHERE ps.playlist_id = ?
        ''', (playlist_id,))
        return cursor.fetchall()

    def search_songs(self, query):
        cursor = self.conn.cursor()
        search_query = f"%{query}%"
        cursor.execute('''
            SELECT id, title, artist, album 
            FROM songs 
            WHERE title LIKE ? OR artist LIKE ? OR album LIKE ?
        ''', (search_query, search_query, search_query))
        return cursor.fetchall()

    def get_all_user_songs(self, username):
        cursor = self.conn.cursor()
        cursor.execute('''
            SELECT DISTINCT s.id, s.title, s.artist, s.album 
            FROM songs s
            JOIN playlist_songs ps ON s.id = ps.song_id
            JOIN playlists p ON ps.playlist_id = p.id
            WHERE p.user_username = ?
        ''', (username,))
        return cursor.fetchall()


class ModernSpotifyApp:
    def __init__(self, root):
        self.root = root
        self.root.title("SoundSync")
        self.root.geometry("1280x720")
        self.root.configure(bg=COLORS["bg_dark"])

        # Custom modern font
        self.font_family = ("Inter", 10)
        self.font_bold = ("Inter", 10, "bold")

        # App state
        self.current_user = None
        self.db_manager = DatabaseManager()

        # Initialize login screen
        self.create_login_screen()

    def create_login_screen(self):
        # Clear any existing widgets
        for widget in self.root.winfo_children():
            widget.destroy()

        # Main login container
        login_frame = tk.Frame(self.root, bg=COLORS["bg_dark"])
        login_frame.pack(fill=tk.BOTH, expand=True)

        # Left side - Branding
        left_panel = tk.Frame(login_frame, bg=COLORS["bg_medium"], width=500)
        left_panel.pack(side=tk.LEFT, fill=tk.Y)
        left_panel.pack_propagate(False)

        # Logo and app name
        logo_label = tk.Label(left_panel, text="SoundSync",
                              font=("Inter", 36, "bold"),
                              fg=COLORS["accent"],
                              bg=COLORS["bg_medium"])
        logo_label.pack(pady=(100, 20))

        # Tagline
        tagline = tk.Label(left_panel,
                           text="Your music, your way",
                           font=("Inter", 14),
                           fg=COLORS["text_secondary"],
                           bg=COLORS["bg_medium"])
        tagline.pack(pady=(0, 40))

        # Login form (right side)
        right_panel = tk.Frame(login_frame, bg=COLORS["bg_dark"])
        right_panel.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True, padx=100)

        # Welcome text
        welcome_label = tk.Label(right_panel,
                                 text="Welcome Back",
                                 font=("Inter", 24, "bold"),
                                 fg=COLORS["text_primary"],
                                 bg=COLORS["bg_dark"])
        welcome_label.pack(anchor="w", pady=(100, 10))

        # Username entry
        username_frame = tk.Frame(right_panel, bg=COLORS["bg_dark"])
        username_frame.pack(fill=tk.X, pady=10)

        username_label = tk.Label(username_frame,
                                  text="USERNAME",
                                  font=self.font_bold,
                                  fg=COLORS["text_secondary"],
                                  bg=COLORS["bg_dark"])
        username_label.pack(anchor="w")

        self.username_entry = tk.Entry(username_frame,
                                       font=self.font_family,
                                       bg=COLORS["bg_light"],
                                       fg=COLORS["text_primary"],
                                       insertbackground=COLORS["text_primary"],
                                       relief=tk.FLAT,
                                       width=40)
        self.username_entry.pack(fill=tk.X, ipady=10)

        # Password entry
        password_frame = tk.Frame(right_panel, bg=COLORS["bg_dark"])
        password_frame.pack(fill=tk.X, pady=10)

        password_label = tk.Label(password_frame,
                                  text="PASSWORD",
                                  font=self.font_bold,
                                  fg=COLORS["text_secondary"],
                                  bg=COLORS["bg_dark"])
        password_label.pack(anchor="w")

        self.password_entry = tk.Entry(password_frame,
                                       show="•",
                                       font=self.font_family,
                                       bg=COLORS["bg_light"],
                                       fg=COLORS["text_primary"],
                                       insertbackground=COLORS["text_primary"],
                                       relief=tk.FLAT,
                                       width=40)
        self.password_entry.pack(fill=tk.X, ipady=10)

        # Login button
        login_button = tk.Button(right_panel,
                                 text="LOG IN",
                                 font=self.font_bold,
                                 bg=COLORS["accent"],
                                 fg=COLORS["text_primary"],
                                 activebackground=COLORS["accent_hover"],
                                 relief=tk.FLAT,
                                 command=self.attempt_login)
        login_button.pack(fill=tk.X, pady=20, ipady=10)

        # Sign up link
        signup_label = tk.Label(right_panel,
                                text="Don't have an account? Sign Up",
                                font=self.font_family,
                                fg=COLORS["text_secondary"],
                                bg=COLORS["bg_dark"],
                                cursor="hand2")
        signup_label.pack(anchor="w")
        signup_label.bind("<Button-1>", self.show_signup)

    def show_signup(self, event=None):
        # Clear existing widgets
        for widget in self.root.winfo_children():
            widget.destroy()

        # Signup screen layout similar to login
        signup_frame = tk.Frame(self.root, bg=COLORS["bg_dark"])
        signup_frame.pack(fill=tk.BOTH, expand=True)

        # Signup form details
        signup_container = tk.Frame(signup_frame, bg=COLORS["bg_dark"])
        signup_container.pack(expand=True)

        title = tk.Label(signup_container,
                         text="Create Account",
                         font=("Inter", 24, "bold"),
                         fg=COLORS["text_primary"],
                         bg=COLORS["bg_dark"])
        title.pack(pady=(50, 20))

        # Username input
        username_label = tk.Label(signup_container,
                                  text="Choose a Username",
                                  font=self.font_bold,
                                  fg=COLORS["text_secondary"],
                                  bg=COLORS["bg_dark"])
        username_label.pack(anchor="w")

        self.signup_username_entry = tk.Entry(signup_container,
                                              font=self.font_family,
                                              bg=COLORS["bg_light"],
                                              fg=COLORS["text_primary"],
                                              width=40,
                                              relief=tk.FLAT)
        self.signup_username_entry.pack(fill=tk.X, ipady=10, pady=(0, 20))

        # Password input
        password_label = tk.Label(signup_container,
                                  text="Create Password",
                                  font=self.font_bold,
                                  fg=COLORS["text_secondary"],
                                  bg=COLORS["bg_dark"])
        password_label.pack(anchor="w")

        self.signup_password_entry = tk.Entry(signup_container,
                                              show="•",
                                              font=self.font_family,
                                              bg=COLORS["bg_light"],
                                              fg=COLORS["text_primary"],
                                              width=40,
                                              relief=tk.FLAT)
        self.signup_password_entry.pack(fill=tk.X, ipady=10, pady=(0, 20))

        # Signup button
        signup_button = tk.Button(signup_container,
                                  text="SIGN UP",
                                  font=self.font_bold,
                                  bg=COLORS["accent"],
                                  fg=COLORS["text_primary"],
                                  activebackground=COLORS["accent_hover"],
                                  relief=tk.FLAT,
                                  command=self.attempt_signup)
        signup_button.pack(fill=tk.X, ipady=10)

        # Back to login link
        login_link = tk.Label(signup_container,
                              text="Already have an account? Log In",
                              font=self.font_family,
                              fg=COLORS["text_secondary"],
                              bg=COLORS["bg_dark"],
                              cursor="hand2")
        login_link.pack(pady=(10, 0))
        login_link.bind("<Button-1>", lambda e: self.create_login_screen())

    def attempt_signup(self):
        username = self.signup_username_entry.get()
        password = self.signup_password_entry.get()

        if not username or not password:
            messagebox.showerror("Signup Failed", "Please enter username and password")
            return

        if len(password) < 4:
            messagebox.showerror("Signup Failed", "Password must be at least 4 characters")
            return

        # Attempt to register user
        if self.db_manager.register_user(username, password):
            messagebox.showinfo("Signup Successful", "Account created! Please log in.")
            self.create_login_screen()
        else:
            messagebox.showerror("Signup Failed", "Username already exists")

    def attempt_login(self):
        username = self.username_entry.get()
        password = self.password_entry.get()

        if self.db_manager.validate_user(username, password):
            self.current_user = username
            self.create_main_app_screen()
        else:
            messagebox.showerror("Login Failed", "Invalid username or password")

    def create_main_app_screen(self):
        # Clear login screen
        for widget in self.root.winfo_children():
            widget.destroy()

        # Configure grid layout
        self.root.grid_columnconfigure(1, weight=1)
        self.root.grid_rowconfigure(0, weight=1)

        # Sidebar
        sidebar = tk.Frame(self.root, bg=COLORS["bg_medium"], width=250)
        sidebar.grid(row=0, column=0, rowspan=2, sticky="nsew")
        sidebar.grid_propagate(False)

        # Logo
        logo_label = tk.Label(sidebar,
                              text="SoundSync",
                              font=("Inter", 20, "bold"),
                              fg=COLORS["accent"],
                              bg=COLORS["bg_medium"])
        logo_label.pack(pady=(30, 20))

        # Navigation frame
        nav_frame = tk.Frame(sidebar, bg=COLORS["bg_medium"])
        nav_frame.pack(fill=tk.X, padx=10)

        # Navigation items
        nav_items = [
            ("Home", "🏠", self.show_home_view),
            ("Search", "🔍", self.show_search_view),
            ("Your Library", "📚", self.show_library_view)
        ]

        # Store navigation buttons for reference
        self.nav_buttons = []

        for text, emoji, command in nav_items:
            # Create a frame for each nav item
            nav_item_frame = tk.Frame(nav_frame, bg=COLORS["bg_medium"])
            nav_item_frame.pack(fill=tk.X, pady=5)

            # Icon
            icon_label = tk.Label(nav_item_frame,
                                  text=emoji,
                                  font=("Segoe UI Emoji", 16),
                                  bg=COLORS["bg_medium"],
                                  fg=COLORS["icon_color"])
            icon_label.pack(side=tk.LEFT, padx=(10, 15))

            # Text
            text_label = tk.Label(nav_item_frame,
                                  text=text,
                                  font=self.font_bold,
                                  bg=COLORS["bg_medium"],
                                  fg=COLORS["text_secondary"])
            text_label.pack(side=tk.LEFT)

            # Make the entire frame clickable
            def create_nav_handler(cmd):
                def handler(event):
                    cmd()
                return handler

            nav_handler = create_nav_handler(command)
            nav_item_frame.bind("<Button-1>", nav_handler)
            icon_label.bind("<Button-1>", nav_handler)
            text_label.bind("<Button-1>", nav_handler)

            # Hover effects
            def create_hover_effect(frame, icon, text):
                def on_enter(e):
                    frame.configure(bg=COLORS["bg_light"])
                    icon.configure(fg=COLORS["text_primary"])
                    text.configure(fg=COLORS["text_primary"])

                def on_leave(e):
                    frame.configure(bg=COLORS["bg_medium"])
                    icon.configure(fg=COLORS["icon_color"])
                    text.configure(fg=COLORS["text_secondary"])

                frame.bind("<Enter>", on_enter)
                frame.bind("<Leave>", on_leave)
                icon.bind("<Enter>", on_enter)
                icon.bind("<Leave>", on_leave)
                text.bind("<Enter>", on_enter)
                text.bind("<Leave>", on_leave)

            create_hover_effect(nav_item_frame, icon_label, text_label)

            # Store references
            self.nav_buttons.append({
                'frame': nav_item_frame,
                'icon': icon_label,
                'text': text_label
            })

        # Playlists section
        playlists_header_frame = tk.Frame(sidebar, bg=COLORS["bg_medium"])
        playlists_header_frame.pack(fill=tk.X, pady=(20, 10))

        playlists_label = tk.Label(playlists_header_frame,
                                   text="PLAYLISTS",
                                   font=self.font_bold,
                                   fg=COLORS["text_secondary"],
                                   bg=COLORS["bg_medium"])
        playlists_label.pack(side=tk.LEFT, padx=10)

        # Add playlist button
        add_playlist_btn = tk.Label(playlists_header_frame,
                                    text="+",
                                    font=("Inter", 16, "bold"),
                                    fg=COLORS["icon_color"],
                                    bg=COLORS["bg_medium"],
                                    cursor="hand2")
        add_playlist_btn.pack(side=tk.RIGHT, padx=10)
        add_playlist_btn.bind("<Button-1>", self.create_new_playlist)
        add_playlist_btn.bind("<Enter>", lambda e: add_playlist_btn.config(fg=COLORS["text_primary"]))
        add_playlist_btn.bind("<Leave>", lambda e: add_playlist_btn.config(fg=COLORS["icon_color"]))

        # Playlists scrollable container
        playlists_container = tk.Frame(sidebar, bg=COLORS["bg_medium"])
        playlists_container.pack(fill=tk.BOTH, expand=True)

        self.playlists_list = tk.Canvas(playlists_container,
                                        bg=COLORS["bg_medium"],
                                        highlightthickness=0)
        self.playlists_list.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

        # Scrollbar for playlists
        playlists_scrollbar = ttk.Scrollbar(playlists_container,
                                            orient=tk.VERTICAL,
                                            command=self.playlists_list.yview)
        playlists_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        self.playlists_list.configure(yscrollcommand=playlists_scrollbar.set)

        # Playlists frame inside canvas
        self.playlists_frame = tk.Frame(self.playlists_list, bg=COLORS["bg_medium"])
        self.playlists_list.create_window((0, 0), window=self.playlists_frame, anchor="nw")

        # Populate playlists
        self.populate_playlists()

        # Main content area
        main_content = tk.Frame(self.root, bg=COLORS["bg_dark"])
        main_content.grid(row=0, column=1, sticky="nsew")

        # Now playing bar
        now_playing = tk.Frame(self.root, bg=COLORS["bg_medium"], height=90)
        now_playing.grid(row=1, column=1, sticky="sew")
        now_playing.grid_propagate(False)

        # Set up main content view
        self.main_content_frame = main_content
        self.show_home_view()

    def populate_playlists(self):
        """Fetch and display user's playlists in the sidebar"""
        # Clear existing playlist entries
        for widget in self.playlists_frame.winfo_children():
            widget.destroy()

        # Fetch user's playlists from database
        playlists = self.db_manager.get_user_playlists(self.current_user)

        # Create playlist entries
        for playlist_id, playlist_name in playlists:
            playlist_frame = tk.Frame(self.playlists_frame, bg=COLORS["bg_medium"])
            playlist_frame.pack(fill=tk.X, pady=2)

            playlist_label = tk.Label(playlist_frame,
                                      text=playlist_name,
                                      font=self.font_family,
                                      fg=COLORS["text_secondary"],
                                      bg=COLORS["bg_medium"],
                                      anchor="w")
            playlist_label.pack(side=tk.LEFT, padx=10)

            # Hover and click effects
            def create_playlist_handlers(frame, label, pl_id, pl_name):
                def on_enter(e):
                    frame.configure(bg=COLORS["bg_light"])
                    label.configure(fg=COLORS["text_primary"])

                def on_leave(e):
                    frame.configure(bg=COLORS["bg_medium"])
                    label.configure(fg=COLORS["text_secondary"])

                def on_click(e):
                    self.show_playlist_view(pl_id, pl_name)

                frame.bind("<Enter>", on_enter)
                frame.bind("<Leave>", on_leave)
                frame.bind("<Button-1>", on_click)
                label.bind("<Enter>", on_enter)
                label.bind("<Leave>", on_leave)
                label.bind("<Button-1>", on_click)

            create_playlist_handlers(playlist_frame, playlist_label, playlist_id, playlist_name)

        # Update scroll region
        self.playlists_frame.update_idletasks()
        self.playlists_list.configure(scrollregion=self.playlists_list.bbox("all"))

    def create_new_playlist(self, event=None):
        """Open dialog to create a new playlist"""
        playlist_name = simpledialog.askstring("New Playlist",
                                               "Enter playlist name:",
                                               parent=self.root)

        if playlist_name:
            # Create playlist in database
            playlist_id = self.db_manager.create_playlist(playlist_name, self.current_user)

            # Refresh playlists view
            self.populate_playlists()

            # Optional: Immediately show the new playlist
            self.show_playlist_view(playlist_id, playlist_name)

    def show_home_view(self):
        """Display the home screen with recent playlists and recommendations"""
        # Clear previous content
        for widget in self.main_content_frame.winfo_children():
            widget.destroy()

        # Welcome message
        welcome_label = tk.Label(self.main_content_frame,
                                 text=f"Good {self.get_time_of_day()}, {self.current_user}",
                                 font=("Inter", 24, "bold"),
                                 fg=COLORS["text_primary"],
                                 bg=COLORS["bg_dark"])
        welcome_label.pack(anchor="w", padx=20, pady=20)

        # Recent playlists section
        recent_playlists_frame = tk.Frame(self.main_content_frame, bg=COLORS["bg_dark"])
        recent_playlists_frame.pack(fill=tk.X, padx=20)

        recent_label = tk.Label(recent_playlists_frame,
                                text="Your Playlists",
                                font=("Inter", 16, "bold"),
                                fg=COLORS["text_primary"],
                                bg=COLORS["bg_dark"])
        recent_label.pack(anchor="w", pady=(0, 10))

        # Playlist cards container
        playlist_cards_frame = tk.Frame(self.main_content_frame, bg=COLORS["bg_dark"])
        playlist_cards_frame.pack(fill=tk.X, padx=20)

        # Fetch user's playlists
        playlists = self.db_manager.get_user_playlists(self.current_user)

        # Display playlist cards
        for i, (playlist_id, playlist_name) in enumerate(playlists):
            # Create playlist card
            card_frame = tk.Frame(playlist_cards_frame,
                                  bg=COLORS["bg_medium"],
                                  width=200,
                                  height=250)
            card_frame.grid(row=i // 4, column=i % 4, padx=5, pady=5, sticky="nsew")
            card_frame.grid_propagate(False)

            # Playlist image placeholder
            image_frame = tk.Frame(card_frame,
                                   bg=COLORS["bg_light"],
                                   width=180,
                                   height=180)
            image_frame.pack(padx=10, pady=10)
            image_frame.pack_propagate(False)

            # Playlist icon
            playlist_icon = tk.Label(image_frame,
                                     text="🎵",
                                     font=("Segoe UI Emoji", 48),
                                     bg=COLORS["bg_light"],
                                     fg=COLORS["accent"])
            playlist_icon.place(relx=0.5, rely=0.5, anchor="center")

            # Playlist name
            name_label = tk.Label(card_frame,
                                  text=playlist_name,
                                  font=self.font_bold,
                                  fg=COLORS["text_primary"],
                                  bg=COLORS["bg_medium"])
            name_label.pack(anchor="w", padx=10, pady=(0, 5))

            # Song count
            songs = self.db_manager.get_playlist_songs(playlist_id)
            count_label = tk.Label(card_frame,
                                   text=f"{len(songs)} songs",
                                   font=self.font_family,
                                   fg=COLORS["text_secondary"],
                                   bg=COLORS["bg_medium"])
            count_label.pack(anchor="w", padx=10)

            # Make card clickable
            def create_playlist_opener(pl_id, pl_name):
                def open_playlist(event):
                    self.show_playlist_view(pl_id, pl_name)
                return open_playlist

            card_frame.bind("<Button-1>", create_playlist_opener(playlist_id, playlist_name))
            image_frame.bind("<Button-1>", create_playlist_opener(playlist_id, playlist_name))
            name_label.bind("<Button-1>", create_playlist_opener(playlist_id, playlist_name))
            count_label.bind("<Button-1>", create_playlist_opener(playlist_id, playlist_name))

    def show_search_view(self):
        """Display the search screen"""
        # Clear previous content
        for widget in self.main_content_frame.winfo_children():
            widget.destroy()

        # Search header
        search_frame = tk.Frame(self.main_content_frame, bg=COLORS["bg_dark"])
        search_frame.pack(fill=tk.X, padx=20, pady=20)

        search_label = tk.Label(search_frame,
                                text="Search",
                                font=("Inter", 24, "bold"),
                                fg=COLORS["text_primary"],
                                bg=COLORS["bg_dark"])
        search_label.pack(side=tk.LEFT)

        # Search input
        self.search_entry = tk.Entry(search_frame,
                                     font=self.font_family,
                                     bg=COLORS["bg_light"],
                                     fg=COLORS["text_primary"],
                                     width=50,
                                     relief=tk.FLAT)
        self.search_entry.pack(side=tk.RIGHT, fill=tk.X, padx=(10, 0), ipady=5)

        # Search button
        search_button = tk.Button(search_frame,
                                  text="Search",
                                  font=self.font_bold,
                                  bg=COLORS["accent"],
                                  fg=COLORS["text_primary"],
                                  command=self.perform_search)
        search_button.pack(side=tk.RIGHT, padx=5)

        # Bind Enter key to search function
        self.search_entry.bind("<Return>", lambda event: self.perform_search())

        # Search results frame
        self.results_frame = tk.Frame(self.main_content_frame, bg=COLORS["bg_dark"])
        self.results_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)

    def perform_search(self):
        """Search for songs and display results"""
        query = self.search_entry.get()

        if not query:
            return

        # Clear previous results
        for widget in self.results_frame.winfo_children():
            widget.destroy()

        # Search for songs
        results = self.db_manager.search_songs(query)

        # Display results header
        results_title = tk.Label(self.results_frame,
                                text=f"Search Results for '{query}'",
                             font=("Inter", 16, "bold"),
                             fg=COLORS["text_primary"],
                             bg=COLORS["bg_dark"])
        results_title.pack(anchor="w", pady=(0, 10))

        # Create table header
        header_frame = tk.Frame(self.results_frame, bg=COLORS["bg_dark"])
        header_frame.pack(fill=tk.X, pady=(0, 10))

        columns = ["Title", "Artist", "Album", "Actions"]
        widths = [3, 2, 2, 1]

        for i, col in enumerate(columns):
            col_frame = tk.Frame(header_frame, bg=COLORS["bg_dark"])
            col_frame.pack(side=tk.LEFT, fill=tk.X, expand=widths[i])

            tk.Label(col_frame,
                text=col,
                font=self.font_bold,
                fg=COLORS["accent"],
                bg=COLORS["bg_dark"]).pack(anchor="w")

        # Create scrollable results container
        results_container = tk.Frame(self.results_frame, bg=COLORS["bg_dark"])
        results_container.pack(fill=tk.BOTH, expand=True)

        # Add rows for each result
        for song_id, title, artist, album in results:
            row_frame = tk.Frame(results_container, bg=COLORS["bg_medium"])
            row_frame.pack(fill=tk.X, pady=2)

            # Title column
            title_frame = tk.Frame(row_frame, bg=COLORS["bg_medium"])
            title_frame.pack(side=tk.LEFT, fill=tk.X, expand=3)

            tk.Label(title_frame,
                text=title,
                font=self.font_family,
                fg=COLORS["text_primary"],
                bg=COLORS["bg_medium"]).pack(anchor="w", padx=5, pady=5)

            # Artist column
            artist_frame = tk.Frame(row_frame, bg=COLORS["bg_medium"])
            artist_frame.pack(side=tk.LEFT, fill=tk.X, expand=2)

            tk.Label(artist_frame,
                text=artist,
                font=self.font_family,
                fg=COLORS["text_secondary"],
                bg=COLORS["bg_medium"]).pack(anchor="w", padx=5, pady=5)

            # Album column
            album_frame = tk.Frame(row_frame, bg=COLORS["bg_medium"])
            album_frame.pack(side=tk.LEFT, fill=tk.X, expand=2)

            tk.Label(album_frame,
                text=album or "Unknown",
                font=self.font_family,
                fg=COLORS["text_secondary"],
                bg=COLORS["bg_medium"]).pack(anchor="w", padx=5, pady=5)

            # Actions column
            actions_frame = tk.Frame(row_frame, bg=COLORS["bg_medium"])
            actions_frame.pack(side=tk.LEFT, fill=tk.X, expand=1)

            add_button = tk.Button(actions_frame,
                              text="Add to Playlist",
                              font=self.font_family,
                              bg=COLORS["accent"],
                              fg=COLORS["text_primary"],
                              relief=tk.FLAT,
                              command=lambda sid=song_id: self.add_to_playlist_dialog(sid))
            add_button.pack(padx=5, pady=5)

        # Show "No results found" message if no matches
        if not results:
            no_results = tk.Label(results_container,
                             text="No songs found matching your search",
                             font=self.font_family,
                             fg=COLORS["text_secondary"],
                             bg=COLORS["bg_dark"])
            no_results.pack(pady=20)

    def add_to_playlist_dialog(self, song_id):
        """Show dialog to add a song to a playlist"""
        # Get user's playlists
        playlists = self.db_manager.get_user_playlists(self.current_user)

        if not playlists:
            messagebox.showinfo("No Playlists", "You don't have any playlists yet. Create one first!")
            return

        # Create a simple dialog
        dialog = tk.Toplevel(self.root)
        dialog.title("Add to Playlist")
        dialog.geometry("300x300")
        dialog.configure(bg=COLORS["bg_dark"])

        # Make dialog modal
        dialog.transient(self.root)
        dialog.grab_set()

        # Heading
        tk.Label(dialog,
            text="Select a Playlist",
            font=self.font_bold,
            fg=COLORS["text_primary"],
            bg=COLORS["bg_dark"]).pack(pady=10)

        # Create a listbox with playlists
        playlist_listbox = tk.Listbox(dialog,
                                 bg=COLORS["bg_light"],
                                 fg=COLORS["text_primary"],
                                 font=self.font_family,
                                 selectbackground=COLORS["accent"],
                                 relief=tk.FLAT,
                                 width=40,
                                 height=10)
        playlist_listbox.pack(padx=10, pady=10, fill=tk.BOTH, expand=True)

        # Add playlists to listbox
        playlist_ids = []
        for playlist_id, playlist_name in playlists:
            playlist_listbox.insert(tk.END, playlist_name)
            playlist_ids.append(playlist_id)

        # Add button
        add_button = tk.Button(dialog,
                          text="Add to Selected Playlist",
                          font=self.font_family,
                          bg=COLORS["accent"],
                          fg=COLORS["text_primary"],
                          relief=tk.FLAT,
                          command=lambda: self.add_song_to_playlist(dialog, playlist_ids[playlist_listbox.curselection()[0]], song_id) if playlist_listbox.curselection() else None)
        add_button.pack(pady=10, padx=10, fill=tk.X)

    def add_song_to_playlist(self, dialog, playlist_id, song_id):
        """Add a song to the selected playlist"""
        if self.db_manager.add_song_to_playlist(playlist_id, song_id):
            messagebox.showinfo("Success", "Song added to playlist!")
        else:
            messagebox.showinfo("Info", "This song is already in the playlist.")

        dialog.destroy()

    def show_library_view(self):
        """Display the user's library with all their songs"""
        # Clear previous content
        for widget in self.main_content_frame.winfo_children():
            widget.destroy()

        # Library header
        library_label = tk.Label(self.main_content_frame,
                            text="Your Library",
                            font=("Inter", 24, "bold"),
                            fg=COLORS["text_primary"],
                            bg=COLORS["bg_dark"])
        library_label.pack(anchor="w", padx=20, pady=20)

        # Tabs for different library views
        tabs_frame = tk.Frame(self.main_content_frame, bg=COLORS["bg_dark"])
        tabs_frame.pack(fill=tk.X, padx=20)

        # Tabs
        tabs = [
            ("All Songs", self.show_all_songs_tab),
            ("Recently Added", self.show_recent_tab),
            ("Most Played", self.show_most_played_tab)
        ]

        for i, (tab_name, tab_command) in enumerate(tabs):
            tab_button = tk.Button(tabs_frame,
                              text=tab_name,
                              font=self.font_bold,
                              bg=COLORS["bg_light"] if i == 0 else COLORS["bg_dark"],
                              fg=COLORS["text_primary"] if i == 0 else COLORS["text_secondary"],
                              bd=0,
                              relief=tk.FLAT,
                              padx=15,
                              pady=5,
                              command=tab_command)
            tab_button.pack(side=tk.LEFT, padx=(0, 10))

        # Content frame for tab content
        self.library_content_frame = tk.Frame(self.main_content_frame, bg=COLORS["bg_dark"])
        self.library_content_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)

        # Show all songs by default
        self.show_all_songs_tab()

    def show_all_songs_tab(self):
        """Show all songs in the library"""
        # Clear previous content
        for widget in self.library_content_frame.winfo_children():
            widget.destroy()

        # Get all user's songs
        songs = self.db_manager.get_all_user_songs(self.current_user)

        # Create table header
        header_frame = tk.Frame(self.library_content_frame, bg=COLORS["bg_dark"])
        header_frame.pack(fill=tk.X, pady=(0, 10))

        columns = ["Title", "Artist", "Album", "Actions"]
        widths = [3, 2, 2, 1]

        for i, col in enumerate(columns):
            col_frame = tk.Frame(header_frame, bg=COLORS["bg_dark"])
            col_frame.pack(side=tk.LEFT, fill=tk.X, expand=widths[i])

            tk.Label(col_frame,
                text=col,
                font=self.font_bold,
                fg=COLORS["accent"],
                bg=COLORS["bg_dark"]).pack(anchor="w")

        # Create scrollable results container
        songs_container = tk.Frame(self.library_content_frame, bg=COLORS["bg_dark"])
        songs_container.pack(fill=tk.BOTH, expand=True)

        # Add rows for each song
        for song_id, title, artist, album in songs:
            row_frame = tk.Frame(songs_container, bg=COLORS["bg_medium"])
            row_frame.pack(fill=tk.X, pady=2)

            # Title column
            title_frame = tk.Frame(row_frame, bg=COLORS["bg_medium"])
            title_frame.pack(side=tk.LEFT, fill=tk.X, expand=3)

            tk.Label(title_frame,
                text=title,
                font=self.font_family,
                fg=COLORS["text_primary"],
                bg=COLORS["bg_medium"]).pack(anchor="w", padx=5, pady=5)

            # Artist column
            artist_frame = tk.Frame(row_frame, bg=COLORS["bg_medium"])
            artist_frame.pack(side=tk.LEFT, fill=tk.X, expand=2)

            tk.Label(artist_frame,
                text=artist,
                font=self.font_family,
                fg=COLORS["text_secondary"],
                bg=COLORS["bg_medium"]).pack(anchor="w", padx=5, pady=5)

            # Album column
            album_frame = tk.Frame(row_frame, bg=COLORS["bg_medium"])
            album_frame.pack(side=tk.LEFT, fill=tk.X, expand=2)

            tk.Label(album_frame,
                text=album or "Unknown",
                font=self.font_family,
                fg=COLORS["text_secondary"],
                bg=COLORS["bg_medium"]).pack(anchor="w", padx=5, pady=5)

            # Actions column
            actions_frame = tk.Frame(row_frame, bg=COLORS["bg_medium"])
            actions_frame.pack(side=tk.LEFT, fill=tk.X, expand=1)

            # Play button
            play_button = tk.Button(actions_frame,
                               text="Play",
                               font=self.font_family,
                               bg=COLORS["accent"],
                               fg=COLORS["text_primary"],
                               relief=tk.FLAT,
                               command=lambda s=title: self.play_song_demo(s))
            play_button.pack(side=tk.LEFT, padx=5, pady=5)

        # Show "No songs" message if library is empty
        if not songs:
            no_songs = tk.Label(songs_container,
                           text="Your library is empty. Add songs to get started!",
                           font=self.font_family,
                           fg=COLORS["text_secondary"],
                           bg=COLORS["bg_dark"])
            no_songs.pack(pady=20)

    def show_recent_tab(self):
        """Show recently added songs (stub)"""
        # Clear previous content
        for widget in self.library_content_frame.winfo_children():
            widget.destroy()

        # Placeholder message
        tk.Label(self.library_content_frame,
            text="Coming Soon: Recently Added Songs",
            font=self.font_bold,
            fg=COLORS["text_secondary"],
            bg=COLORS["bg_dark"]).pack(pady=50)

    def show_most_played_tab(self):
        """Show most played songs (stub)"""
        # Clear previous content
        for widget in self.library_content_frame.winfo_children():
            widget.destroy()

        # Placeholder message
        tk.Label(self.library_content_frame,
            text="Coming Soon: Most Played Songs",
            font=self.font_bold,
            fg=COLORS["text_secondary"],
            bg=COLORS["bg_dark"]).pack(pady=50)

    def show_playlist_view(self, playlist_id, playlist_name):
        """Display a specific playlist and its songs"""
        # Clear previous content
        for widget in self.main_content_frame.winfo_children():
            widget.destroy()

        # Get songs in playlist
        songs = self.db_manager.get_playlist_songs(playlist_id)

        # Playlist header section
        header_frame = tk.Frame(self.main_content_frame, bg=COLORS["bg_dark"])
        header_frame.pack(fill=tk.X, padx=20, pady=20)

        # Playlist image placeholder
        image_frame = tk.Frame(header_frame,
                          bg=COLORS["bg_light"],
                          width=200,
                          height=200)
        image_frame.pack(side=tk.LEFT, padx=(0, 20))
        image_frame.pack_propagate(False)

        # Playlist icon
        playlist_icon = tk.Label(image_frame,
                            text="🎵",
                            font=("Segoe UI Emoji", 64),
                            bg=COLORS["bg_light"],
                            fg=COLORS["accent"])
        playlist_icon.place(relx=0.5, rely=0.5, anchor="center")

        # Playlist info
        info_frame = tk.Frame(header_frame, bg=COLORS["bg_dark"])
        info_frame.pack(side=tk.LEFT)

        # Playlist type label
        tk.Label(info_frame,
            text="PLAYLIST",
            font=self.font_bold,
            fg=COLORS["text_secondary"],
            bg=COLORS["bg_dark"]).pack(anchor="w", pady=(0, 5))

        # Playlist name
        tk.Label(info_frame,
            text=playlist_name,
            font=("Inter", 32, "bold"),
            fg=COLORS["text_primary"],
            bg=COLORS["bg_dark"]).pack(anchor="w", pady=(0, 10))

        # Song count & creator
        tk.Label(info_frame,
            text=f"{len(songs)} songs • Created by {self.current_user}",
            font=self.font_family,
            fg=COLORS["text_secondary"],
            bg=COLORS["bg_dark"]).pack(anchor="w")

        # Action buttons
        buttons_frame = tk.Frame(self.main_content_frame, bg=COLORS["bg_dark"])
        buttons_frame.pack(fill=tk.X, padx=20, pady=(0, 20))

        # Play button
        play_button = tk.Button(buttons_frame,
                           text="▶ Play",
                           font=self.font_bold,
                           bg=COLORS["accent"],
                           fg=COLORS["text_primary"],
                           relief=tk.FLAT,
                           padx=30,
                           pady=10,
                           command=lambda: self.play_song_demo(playlist_name))
        play_button.pack(side=tk.LEFT)

        # Add song button
        add_button = tk.Button(buttons_frame,
                          text="+ Add Songs",
                          font=self.font_family,
                          bg=COLORS["bg_light"],
                          fg=COLORS["text_primary"],
                          relief=tk.FLAT,
                          padx=20,
                          pady=10,
                          command=lambda: self.show_search_view())
        add_button.pack(side=tk.LEFT, padx=10)

        # Songs listing
        songs_frame = tk.Frame(self.main_content_frame, bg=COLORS["bg_dark"])
        songs_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)

        # Table header
        header_frame = tk.Frame(songs_frame, bg=COLORS["bg_dark"])
        header_frame.pack(fill=tk.X, pady=(0, 10))

        columns = ["#", "Title", "Artist", "Album", "Actions"]
        widths = [1, 3, 2, 2, 1]

        for i, col in enumerate(columns):
            col_frame = tk.Frame(header_frame, bg=COLORS["bg_dark"])
            col_frame.pack(side=tk.LEFT, fill=tk.X, expand=widths[i])

            tk.Label(col_frame,
                text=col,
                font=self.font_bold,
                fg=COLORS["text_secondary"],
                bg=COLORS["bg_dark"]).pack(anchor="w")

        # Songs list
        for i, (song_id, title, artist, album) in enumerate(songs):
            row_frame = tk.Frame(songs_frame, bg=COLORS["bg_dark"])
            row_frame.pack(fill=tk.X, pady=2)

            # Number column
            num_frame = tk.Frame(row_frame, bg=COLORS["bg_dark"])
            num_frame.pack(side=tk.LEFT, fill=tk.X, expand=1)

            tk.Label(num_frame,
                text=str(i+1),
                font=self.font_family,
                fg=COLORS["text_secondary"],
                bg=COLORS["bg_dark"]).pack(anchor="w", padx=5, pady=5)

            # Title column
            title_frame = tk.Frame(row_frame, bg=COLORS["bg_dark"])
            title_frame.pack(side=tk.LEFT, fill=tk.X, expand=3)

            tk.Label(title_frame,
                text=title,
                font=self.font_family,
                fg=COLORS["text_primary"],
                bg=COLORS["bg_dark"]).pack(anchor="w", padx=5, pady=5)

            # Artist column
            artist_frame = tk.Frame(row_frame, bg=COLORS["bg_dark"])
            artist_frame.pack(side=tk.LEFT, fill=tk.X, expand=2)

            tk.Label(artist_frame,
                text=artist,
                font=self.font_family,
                fg=COLORS["text_secondary"],
                bg=COLORS["bg_dark"]).pack(anchor="w", padx=5, pady=5)

            # Album column
            album_frame = tk.Frame(row_frame, bg=COLORS["bg_dark"])
            album_frame.pack(side=tk.LEFT, fill=tk.X, expand=2)

            tk.Label(album_frame,
                text=album or "Unknown",
                font=self.font_family,
                fg=COLORS["text_secondary"],
                bg=COLORS["bg_dark"]).pack(anchor="w", padx=5, pady=5)

            # Actions column
            actions_frame = tk.Frame(row_frame, bg=COLORS["bg_dark"])
            actions_frame.pack(side=tk.LEFT, fill=tk.X, expand=1)

            # Remove button
            remove_button = tk.Button(actions_frame,
                                 text="Remove",
                                 font=self.font_family,
                                 bg=COLORS["bg_light"],
                                 fg=COLORS["text_primary"],
                                 relief=tk.FLAT,
                                 command=lambda pid=playlist_id, sid=song_id, pname=playlist_name: self.remove_song_from_playlist(pid, sid, pname))
            remove_button.pack(side=tk.LEFT, padx=5, pady=5)

        # Show "Empty playlist" message if no songs
        if not songs:
            no_songs = tk.Label(songs_frame,
                           text="This playlist is empty. Add some songs!",
                           font=self.font_family,
                           fg=COLORS["text_secondary"],
                           bg=COLORS["bg_dark"])
            no_songs.pack(pady=20)

    def remove_song_from_playlist(self, playlist_id, song_id, playlist_name):
        """Remove a song from a playlist"""
        if messagebox.askyesno("Confirm", "Remove this song from the playlist?"):
            if self.db_manager.remove_song_from_playlist(playlist_id, song_id):
                messagebox.showinfo("Success", "Song removed from playlist")
                # Refresh playlist view
                self.show_playlist_view(playlist_id, playlist_name)
            else:
                messagebox.showerror("Error", "Failed to remove song")

    def play_song_demo(self, song_name):
        """Simulated play function (just shows a message)"""
        messagebox.showinfo("Playing", f"Now playing: {song_name}\n\n(Playback functionality would be implemented here in a real app)")

    def get_time_of_day(self):
        """Return a greeting based on time of day"""
        hour = dt.datetime.now().hour

        if hour < 12:
            return "Morning"
        elif hour < 18:
            return "Afternoon"
        else:
            return "Evening"


# Run the application
if __name__ == "__main__":
    root = tk.Tk()
    app = ModernSpotifyApp(root)
    root.mainloop()
